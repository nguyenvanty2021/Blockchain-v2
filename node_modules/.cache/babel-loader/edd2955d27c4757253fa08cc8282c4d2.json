{"ast":null,"code":"import _objectSpread from \"/Users/tynguyen/Desktop/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/tynguyen/Desktop/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/tynguyen/Desktop/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/tynguyen/Desktop/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/tynguyen/Desktop/defi-staking-app-starter/src/components/App.js\";\n\nimport React from \"react\";\nimport Web3 from \"web3\";\nimport Tether from \"./../truffle_abis/Tether.json\";\nimport RWD from \"./../truffle_abis/RWD.json\";\nimport DecentralBank from \"./../truffle_abis/DecentralBank.json\";\n\nvar App = function App() {\n  var _React$useState = React.useState({\n    tether: {},\n    rwd: {},\n    decentralBank: {},\n    tetherBalance: \"0\",\n    rwdBalance: \"0\",\n    stakingBalance: \"0\",\n    accountList: \"0x0\"\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      objectInformation = _React$useState2[0],\n      setObjectInformation = _React$useState2[1];\n\n  var handleCheckWeb3 = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!window.ethereum) {\n                _context.next = 8;\n                break;\n              }\n\n              window.web3 = new Web3(window.ethereum);\n              _context.next = 4;\n              return window.ethereum.enable();\n\n            case 4:\n              _context.next = 6;\n              return loadTetherContract();\n\n            case 6:\n              _context.next = 9;\n              break;\n\n            case 8:\n              if (window.web3) {\n                window.web3 = new Web3(window.web3.currentProvider);\n              } else {\n                window.alert(\"No ethereum browser detected! You can check out MetaMask!\");\n              }\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleCheckWeb3() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var loadTetherContract = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var web3, accountList, networkID, tetherData, rwdData, decentralBankData, tether, rwd, decentralBank, tetherBalance, rwdBalance, stakingBalance;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              web3 = window.web3;\n              _context2.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accountList = _context2.sent;\n              _context2.next = 6;\n              return web3.eth.net.getId();\n\n            case 6:\n              networkID = _context2.sent;\n              tetherData = Tether.networks[networkID];\n              rwdData = RWD.networks[networkID];\n              decentralBankData = DecentralBank.networks[networkID]; // metamask ở GANACHE thì mới lấy được networkID\n\n              if (!(tetherData && rwdData && decentralBankData)) {\n                _context2.next = 26;\n                break;\n              }\n\n              tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n              rwd = new web3.eth.Contract(RWD.abi, rwdData.address);\n              decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\n              _context2.next = 16;\n              return tether.methods.balanceOf(accountList[0]).call();\n\n            case 16:\n              tetherBalance = _context2.sent;\n              _context2.next = 19;\n              return rwd.methods.balanceOf(accountList[0]).call();\n\n            case 19:\n              rwdBalance = _context2.sent;\n              _context2.next = 22;\n              return decentralBank.methods.stakingBalance(accountList[0]).call();\n\n            case 22:\n              stakingBalance = _context2.sent;\n              setObjectInformation(_objectSpread({}, objectInformation, {\n                tether: tether,\n                rwd: rwd,\n                decentralBank: decentralBank,\n                stakingBalance: web3.utils.fromWei(stakingBalance.toString(), \"Ether\"),\n                rwdBalance: web3.utils.fromWei(rwdBalance.toString(), \"Ether\"),\n                tetherBalance: web3.utils.fromWei(tetherBalance.toString(), \"Ether\"),\n                accountList: accountList\n              }));\n              _context2.next = 27;\n              break;\n\n            case 26:\n              window.alert(\"Error! Tether contract not deployed - no detected network!\");\n\n            case 27:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function loadTetherContract() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleStakeTokens = function handleStakeTokens(amount) {\n    var decentralBankData = objectInformation.decentralBankData,\n        from = objectInformation.accountList;\n    decentralBankData.depositTokens(amount).send({\n      from: from\n    });\n  };\n\n  React.useEffect(function () {\n    handleCheckWeb3();\n  }, []);\n  console.log(objectInformation);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, \"Address \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, objectInformation.accountList)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, \"Staking Balance: \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 26\n    }\n  }, objectInformation.stakingBalance)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, \"RWD Balance: \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 22\n    }\n  }, objectInformation.rwdBalance)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, \"Balance: \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 18\n    }\n  }, objectInformation.tetherBalance)));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/tynguyen/Desktop/defi-staking-app-starter/src/components/App.js"],"names":["React","Web3","Tether","RWD","DecentralBank","App","useState","tether","rwd","decentralBank","tetherBalance","rwdBalance","stakingBalance","accountList","objectInformation","setObjectInformation","handleCheckWeb3","window","ethereum","web3","enable","loadTetherContract","currentProvider","alert","eth","getAccounts","net","getId","networkID","tetherData","networks","rwdData","decentralBankData","Contract","abi","address","methods","balanceOf","call","utils","fromWei","toString","handleStakeTokens","amount","from","depositTokens","send","useEffect","console","log"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Web3 from \"web3\";\nimport Tether from \"./../truffle_abis/Tether.json\";\nimport RWD from \"./../truffle_abis/RWD.json\";\nimport DecentralBank from \"./../truffle_abis/DecentralBank.json\";\nconst App = () => {\n  const [objectInformation, setObjectInformation] = React.useState({\n    tether: {},\n    rwd: {},\n    decentralBank: {},\n    tetherBalance: \"0\",\n    rwdBalance: \"0\",\n    stakingBalance: \"0\",\n    accountList: \"0x0\",\n  });\n  const handleCheckWeb3 = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n      await loadTetherContract();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\"No ethereum browser detected! You can check out MetaMask!\");\n    }\n  };\n  const loadTetherContract = async () => {\n    const web3 = window.web3;\n    const accountList = await web3.eth.getAccounts();\n    const networkID = await web3.eth.net.getId();\n    const tetherData = Tether.networks[networkID];\n    const rwdData = RWD.networks[networkID];\n    const decentralBankData = DecentralBank.networks[networkID];\n    // metamask ở GANACHE thì mới lấy được networkID\n    if (tetherData && rwdData && decentralBankData) {\n      const tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n      const rwd = new web3.eth.Contract(RWD.abi, rwdData.address);\n      const decentralBank = new web3.eth.Contract(\n        DecentralBank.abi,\n        decentralBankData.address\n      );\n      let tetherBalance = await tether.methods.balanceOf(accountList[0]).call();\n      let rwdBalance = await rwd.methods.balanceOf(accountList[0]).call();\n      let stakingBalance = await decentralBank.methods\n        .stakingBalance(accountList[0])\n        .call();\n      setObjectInformation({\n        ...objectInformation,\n        tether,\n        rwd,\n        decentralBank,\n        stakingBalance: web3.utils.fromWei(stakingBalance.toString(), \"Ether\"),\n        rwdBalance: web3.utils.fromWei(rwdBalance.toString(), \"Ether\"),\n        tetherBalance: web3.utils.fromWei(tetherBalance.toString(), \"Ether\"),\n        accountList,\n      });\n    } else {\n      window.alert(\n        \"Error! Tether contract not deployed - no detected network!\"\n      );\n    }\n  };\n  const handleStakeTokens = (amount) => {\n    const { decentralBankData, accountList: from } = objectInformation;\n    decentralBankData.depositTokens(amount).send({\n      from,\n    });\n  };\n  React.useEffect(() => {\n    handleCheckWeb3();\n  }, []);\n  console.log(objectInformation);\n  return (\n    <>\n      <p>\n        Address <strong>{objectInformation.accountList}</strong>\n      </p>\n      <p>\n        Staking Balance: <strong>{objectInformation.stakingBalance}</strong>\n      </p>\n      <p>\n        RWD Balance: <strong>{objectInformation.rwdBalance}</strong>\n      </p>\n      <p>\n        Balance: <strong>{objectInformation.tetherBalance}</strong>\n      </p>\n    </>\n  );\n};\nexport default App;\n"]},"metadata":{},"sourceType":"module"}